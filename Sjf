#include <stdio.h>

struct Process {
    int pid;
    int arrivalTime;
    int burstTime;
    int remainingTime;
    int completionTime;
    int waitingTime;
    int turnAroundTime;
};

void SJF_Preemptive(struct Process p[], int n) {
    int completed = 0, time = 0;
    float totalWaitingTime = 0, totalTurnAroundTime = 0;
    
    while (completed != n) {
        int shortest = -1;
        int minRem = 9999;
        
        
        for (int i = 0; i < n; i++) {
            if (p[i].arrivalTime <= time && p[i].remainingTime > 0 && p[i].remainingTime < minRem) {
                minRem = p[i].remainingTime;
                shortest = i;
            }
        }

        if (shortest == -1) {
            time++;
            continue;
        }

        
        p[shortest].remainingTime--;
        time++;
        
        if (p[shortest].remainingTime == 0) {
            completed++;
            p[shortest].completionTime = time;
            p[shortest].turnAroundTime = p[shortest].completionTime - p[shortest].arrivalTime;
            p[shortest].waitingTime = p[shortest].turnAroundTime - p[shortest].burstTime;

            
            totalWaitingTime += p[shortest].waitingTime;
            totalTurnAroundTime += p[shortest].turnAroundTime;
        }
    }

    
    printf("\nAverage Waiting Time: %.2f", totalWaitingTime / n);
    printf("\nAverage Turnaround Time: %.2f\n", totalTurnAroundTime / n);
}

int main() {
    int n;

    
    printf("Enter number of processes: ");
    scanf("%d", &n);

    struct Process p[n];

    
    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter Arrival Time and Burst Time for process %d: ", p[i].pid);
        scanf("%d %d", &p[i].arrivalTime, &p[i].burstTime);
        p[i].remainingTime = p[i].burstTime;
    }

    
    SJF_Preemptive(p, n);


    printf("\nPID\tArrival\tBurst\tCompletion\tWaiting\tTurnaround\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t\t%d\t%d\n", p[i].pid, p[i].arrivalTime, p[i].burstTime,
            p[i].completionTime, p[i].waitingTime, p[i].turnAroundTime);
    }

    return 0;
}

#include <stdio.h>

struct Process {
    int pid;
    int arrivalTime;
    int burstTime;
    int remainingTime;
    int completionTime;
    int waitingTime;
    int turnAroundTime;
};

void RoundRobin(struct Process p[], int n, int timeQuantum) {
    int completed = 0, time = 0;
    float totalWaitingTime = 0, totalTurnAroundTime = 0;

    while (completed != n) {
        int processExecuted = 0;

        for (int i = 0; i < n; i++) {
            if (p[i].arrivalTime <= time && p[i].remainingTime > 0) {
                processExecuted = 1;
                printf("P%d ", p[i].pid);

                if (p[i].remainingTime > timeQuantum) {
                    time += timeQuantum;
                    p[i].remainingTime -= timeQuantum;
                } else {
                    time += p[i].remainingTime;
                    p[i].remainingTime = 0;
                    p[i].completionTime = time;
                    p[i].turnAroundTime = p[i].completionTime - p[i].arrivalTime;
                    p[i].waitingTime = p[i].turnAroundTime - p[i].burstTime;

                    totalWaitingTime += p[i].waitingTime;
                    totalTurnAroundTime += p[i].turnAroundTime;
                    completed++;
                }
            }
        }

        if (processExecuted == 0) {
            time++;
        }
    }

    printf("\n\nAverage Waiting Time: %.2f", totalWaitingTime / n);
    printf("\nAverage Turnaround Time: %.2f\n", totalTurnAroundTime / n);
}

int main() {
    int n, timeQuantum;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process p[n];

    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter Arrival Time and Burst Time for process P%d: ", p[i].pid);
        scanf("%d %d", &p[i].arrivalTime, &p[i].burstTime);
        p[i].remainingTime = p[i].burstTime;
    }

    printf("Enter time quantum: ");
    scanf("%d", &timeQuantum);

    RoundRobin(p, n, timeQuantum);

    printf("\nPID\tArrival\tBurst\tCompletion\tWaiting\tTurnaround\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t\t%d\t%d\n", p[i].pid, p[i].arrivalTime, p[i].burstTime,
            p[i].completionTime, p[i].waitingTime, p[i].turnAroundTime);
    }

    return 0;
}
